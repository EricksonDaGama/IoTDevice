import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.HashMap;
import java.util.Map;

public class IoTServer {
    private ExecutorService executorService;
    private AuthenticationService authenticationService;
    private DeviceManager deviceManager;

    public IoTServer() {
        executorService = Executors.newCachedThreadPool();
        authenticationService = new AuthenticationService();
        deviceManager = new DeviceManager();
    }

    public void startServer() {
        try (ServerSocket serverSocket = new ServerSocket(23456)) {
            System.out.println("Servidor iniciado.");
            while (true) {
                Socket clientSocket = serverSocket.accept();
                executorService.submit(new ClientHandlerThread(clientSocket, authenticationService, deviceManager));
            }
        } catch (IOException e) {
            System.err.println("Erro ao iniciar o servidor: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        new IoTServer().startServer();
    }

    class ClientHandlerThread implements Runnable {
        private Socket clientSocket;
        private AuthenticationService authenticationService;
        private DeviceManager deviceManager;

        ClientHandlerThread(Socket socket, AuthenticationService authService, DeviceManager deviceMgr) {
            this.clientSocket = socket;
            this.authenticationService = authService;
            this.deviceManager = deviceMgr;
        }

        // Dentro da classe IoTServer, na classe ClientHandlerThread
        @Override
        public void run() {
            try (ObjectOutputStream outStream = new ObjectOutputStream(clientSocket.getOutputStream());
                 ObjectInputStream inStream = new ObjectInputStream(clientSocket.getInputStream())) {

                // Autenticação do usuário
                String username = (String) inStream.readObject();
                String password = (String) inStream.readObject();

                String authResponse = authenticationService.authenticateUser(username, password);
                outStream.writeUTF(authResponse);

                if (!authResponse.equals("OK-USER") && !authResponse.equals("OK-NEW-USER")) {
                    return; // Autenticação falhou
                }

                // Verificação do device-id
                int devId = inStream.readInt();
                synchronized (deviceManager) {
                    if (deviceManager.isDeviceActive(username, devId)) {
                        outStream.writeUTF("NOK-DEVID");
                    } else {
                        deviceManager.updateDevice(username, devId);
                        outStream.writeUTF("OK-DEVID");
                    }
                }

                outStream.flush();

            } catch (IOException | ClassNotFoundException e) {
                System.err.println("Erro ao tratar cliente: " + e.getMessage());
            } finally {
                try {
                    clientSocket.close();
                } catch (IOException e) {
                    System.err.println("Erro ao fechar socket: " + e.getMessage());
                }
            }
        }

    }


    // classe para autenticação
    public class AuthenticationService {
        private final String USERS_FILE = "src/users.txt";
        private Map<String, String> userCredentials;

        public AuthenticationService() {
            userCredentials = new HashMap<>();
            loadUserCredentials();
        }

        private void loadUserCredentials() {
            try (BufferedReader reader = new BufferedReader(new FileReader(USERS_FILE))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(":");
                    if (parts.length == 2) {
                        userCredentials.put(parts[0], parts[1]);
                    }
                }
            } catch (IOException e) {
                System.err.println("Erro ao ler o arquivo de credenciais: " + e.getMessage());
            }
        }

        public String authenticateUser(String username, String password) {
            String storedPassword = userCredentials.get(username);
            if (storedPassword != null) {
                if (storedPassword.equals(password)) {
                    return "OK-USER";
                } else {
                    return "WRONG-PWD";
                }
            } else {
                saveNewUser(username, password);
                return "OK-NEW-USER";
            }
        }

        private void saveNewUser(String username, String password) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(USERS_FILE, true))) {
                writer.write(username + ":" + password + "\n");
                userCredentials.put(username, password);
            } catch (IOException e) {
                System.err.println("Erro ao salvar novo usuário: " + e.getMessage());
            }
        }
    }

    // classe device maneger


public class DeviceManager {
    private final String DEVICES_FILE = "src/devices.txt";
    private Map<String, Integer> devices;

    public DeviceManager() {
        devices = new HashMap<>();
        loadDevices();
    }

    private void loadDevices() {
        try (BufferedReader reader = new BufferedReader(new FileReader(DEVICES_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(":");
                if (parts.length == 2) {
                    devices.put(parts[0], Integer.parseInt(parts[1]));
                }
            }
        } catch (IOException e) {
            System.err.println("Erro ao ler o arquivo de dispositivos: " + e.getMessage());
        }
    }

    public boolean isDeviceActive(String userId, int devId) {
        return devices.containsKey(userId) && devices.get(userId).equals(devId);
    }

    public void updateDevice(String userId, int devId) {
        devices.put(userId, devId);
        saveDevices();
    }

    private void saveDevices() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(DEVICES_FILE))) {
            for (Map.Entry<String, Integer> entry : devices.entrySet()) {
                writer.write(entry.getKey() + ":" + entry.getValue() + "\n");
            }
        } catch (IOException e) {
            System.err.println("Erro ao escrever no arquivo de dispositivos: " + e.getMessage());
        }
    }
}

}
